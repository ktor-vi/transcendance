// üèÜ SERVEUR DE TOURNOI CORRIG√â - FIX RESET JOUEURS
export default async function tournamentRoutes(fastify) {
  // üîß FONCTION POUR CR√âER UN TOURNOI PROPRE
  function createFreshTournament() {
    return {
      players: [], // ‚ö†Ô∏è IMPORTANT: Nouveau tableau √† chaque fois
      state: "waiting",
      round: 0,
      matches: [], // ‚ö†Ô∏è IMPORTANT: Nouveau tableau √† chaque fois
      qualified: [], // ‚ö†Ô∏è IMPORTANT: Nouveau tableau √† chaque fois
      winner: null,
    };
  }

  // Initialiser les tournois si ce n'est pas d√©j√† fait
  if (!fastify.tournaments) {
    fastify.decorate("tournaments", new Map());
  }

  // ===== ROUTES API =====

  fastify.post("/api/tournament/join", async (req, reply) => {
    try {
      const user = req.session?.get("user");
      if (!user) {
        return reply.code(401).send({ error: "Non authentifi√©" });
      }

      const tournamentId = "default";
      console.log("üîç √âtat avant inscription:", {
        tournamentsExists: !!fastify.tournaments,
        tournamentCount: fastify.tournaments ? fastify.tournaments.size : "N/A",
        broadcastAvailable: !!fastify.broadcastTournamentUpdate,
      });

      // üîß FIX: Cr√©er le tournoi avec une fonction qui retourne de nouveaux objets
      if (!fastify.tournaments.has(tournamentId)) {
        const newTournament = createFreshTournament();
        fastify.tournaments.set(tournamentId, newTournament);
        console.log(
          "üèóÔ∏è Nouveau tournoi 'default' cr√©√© avec des tableaux frais"
        );
      }

      const tournament = fastify.tournaments.get(tournamentId);
      console.log("üîç Tournoi r√©cup√©r√©:", {
        found: !!tournament,
        playersCount: tournament?.players?.length || 0,
        currentPlayers: tournament?.players?.map((p) => p.name) || [],
      });

      // √âviter les doublons
      const playerName =
        user.name || user.email || `Player${user.id.slice(0, 4)}`;
      const existingPlayer = tournament.players.find(
        (p) => p.id === user.id || p.name === playerName
      );

      if (!existingPlayer) {
        const playerData = {
          id: user.id,
          name: playerName,
        };
        tournament.players.push(playerData);

        console.log(
          `‚úÖ NOUVEAU JOUEUR AJOUT√â: ${playerData.name} (ID: ${playerData.id})`
        );
        console.log(`üìä Total joueurs: ${tournament.players.length}`);
        console.log(
          "üóÇÔ∏è Liste compl√®te:",
          tournament.players.map((p) => p.name)
        );

        // Diffuser la mise √† jour
        if (fastify.broadcastTournamentUpdate) {
          try {
            fastify.broadcastTournamentUpdate();
            console.log("‚úÖ Diffusion r√©ussie");
          } catch (error) {
            console.error("‚ùå Erreur lors de la diffusion:", error);
          }
        } else {
          console.error("‚ùå broadcastTournamentUpdate non disponible!");
        }
      } else {
        console.log(`‚ÑπÔ∏è Joueur d√©j√† inscrit: ${existingPlayer.name}`);
      }

      return reply.send({
        success: true,
        player: {
          id: user.id,
          name: playerName,
        },
        tournament: {
          playersCount: tournament.players.length,
          state: tournament.state,
          players: tournament.players,
        },
      });
    } catch (error) {
      console.error("‚ùå Erreur lors de l'inscription:", error);
      return reply
        .code(500)
        .send({ error: "Erreur serveur lors de l'inscription" });
    }
  });

  fastify.post("/api/tournament/start", async (req, reply) => {
    try {
      const tournament = fastify.tournaments.get("default");

      if (!tournament) {
        return reply.code(404).send({ error: "Aucun tournoi trouv√©" });
      }

      if (tournament.players.length < 2) {
        return reply
          .code(400)
          .send({ error: "Minimum 2 joueurs requis pour d√©marrer" });
      }

      if (tournament.state !== "waiting") {
        return reply
          .code(400)
          .send({ error: `Tournoi d√©j√† en cours (√©tat: ${tournament.state})` });
      }

      console.log(
        `üöÄ D√©marrage du tournoi avec ${tournament.players.length} joueurs`
      );

      // Initialiser le tournoi
      tournament.state = "running";
      tournament.round = 1;
      tournament.matches = []; // üîß FIX: Nouveau tableau
      tournament.qualified = []; // üîß FIX: Nouveau tableau
      tournament.winner = null;

      // M√©langer les joueurs pour un appariement al√©atoire
      const shuffledPlayers = [...tournament.players].sort(
        () => Math.random() - 0.5
      );

      // Cr√©er les matchs du premier round
      for (let i = 0; i < shuffledPlayers.length; i += 2) {
        const player1 = shuffledPlayers[i];
        const player2 = shuffledPlayers[i + 1];

        if (!player2) {
          // Joueur impair, qualifi√© automatiquement
          tournament.qualified.push(player1);
          console.log(
            `‚≠ê ${player1.name} qualifi√© automatiquement (nombre impair)`
          );
          continue;
        }

        // Cr√©er une room de jeu
        const roomId = fastify.createRoom
          ? fastify.createRoom()
          : `room-${Date.now()}-${i}`;

        const match = {
          roomId,
          player1: player1.name,
          player2: player2.name,
          winner: null,
          scoreP1: 0,
          scoreP2: 0,
          status: "playing",
        };

        tournament.matches.push(match);
        console.log(
          `üéÆ Match cr√©√©: ${player1.name} vs ${player2.name} (Room: ${roomId})`
        );
      }

      // Diffuser la mise √† jour
      if (fastify.broadcastTournamentUpdate) {
        fastify.broadcastTournamentUpdate();
      }

      return reply.send({
        success: true,
        started: true,
        round: tournament.round,
        matchesCount: tournament.matches.length,
        qualifiedCount: tournament.qualified.length,
      });
    } catch (error) {
      console.error("Erreur lors du d√©marrage du tournoi:", error);
      return reply
        .code(500)
        .send({ error: "Erreur serveur lors du d√©marrage" });
    }
  });

  fastify.post("/api/tournament/next", async (req, reply) => {
    try {
      const tournament = fastify.tournaments.get("default");

      if (!tournament) {
        return reply.code(404).send({ error: "Aucun tournoi actif" });
      }

      // üîß FIX: Permettre √† tout joueur de lancer le round suivant
      // V√©rifier si tous les matchs sont termin√©s plut√¥t que l'√©tat exact
      const allMatchesFinished =
        tournament.matches && tournament.matches.length > 0
          ? tournament.matches.every(
              (match) => match.status === "finished" && match.winner
            )
          : false;

      if (tournament.state === "running" && !allMatchesFinished) {
        return reply.code(400).send({
          error: `Des matchs sont encore en cours. Attendez que tous les matchs soient termin√©s.`,
          finishedMatches: tournament.matches.filter(
            (m) => m.status === "finished"
          ).length,
          totalMatches: tournament.matches.length,
        });
      }

      if (
        tournament.state !== "completed_round" &&
        tournament.state !== "running"
      ) {
        return reply.code(400).send({
          error: `Impossible de passer au round suivant (√©tat actuel: ${tournament.state})`,
        });
      }

      // üîß AUTO-COMPLETION: Si tous les matchs sont finis mais √©tat pas mis √† jour
      if (tournament.state === "running" && allMatchesFinished) {
        tournament.state = "completed_round";
        console.log(
          "üîÑ √âtat automatiquement mis √† jour vers 'completed_round'"
        );
      }

      console.log(
        `üîÑ Passage au round suivant (round ${tournament.round + 1})`
      );

      // Collecter tous les gagnants du round pr√©c√©dent
      const roundWinners = tournament.matches
        .filter((match) => match.winner)
        .map((match) =>
          tournament.players.find((player) => player.name === match.winner)
        )
        .filter(Boolean);

      // Ajouter les joueurs automatiquement qualifi√©s
      const allQualified = [...roundWinners, ...(tournament.qualified || [])];

      console.log(
        `Joueurs qualifi√©s:`,
        allQualified.map((p) => p.name)
      );

      // V√©rifier les conditions de fin
      if (allQualified.length === 0) {
        return reply.code(400).send({ error: "Aucun joueur qualifi√© trouv√©" });
      }

      if (allQualified.length === 1) {
        // Tournoi termin√© - nous avons un gagnant !
        tournament.state = "completed";
        tournament.winner = allQualified[0];

        console.log(`üèÜ TOURNOI TERMIN√â! Gagnant: ${tournament.winner.name}`);

        if (fastify.broadcastTournamentUpdate) {
          fastify.broadcastTournamentUpdate();
        }

        return reply.send({
          success: true,
          finished: true,
          winner: tournament.winner,
        });
      }

      // Pr√©parer le round suivant
      tournament.round += 1;
      tournament.matches = []; // üîß FIX: Nouveau tableau
      tournament.qualified = []; // üîß FIX: Nouveau tableau
      tournament.state = "running";

      // Cr√©er les matchs pour le nouveau round
      const shuffledQualified = [...allQualified].sort(
        () => Math.random() - 0.5
      );

      for (let i = 0; i < shuffledQualified.length; i += 2) {
        const player1 = shuffledQualified[i];
        const player2 = shuffledQualified[i + 1];

        if (!player2) {
          // Joueur impair, qualifi√© pour le round suivant
          tournament.qualified.push(player1);
          console.log(
            `‚≠ê ${player1.name} qualifi√© automatiquement pour le round ${
              tournament.round + 1
            }`
          );
          continue;
        }

        // Cr√©er une nouvelle room
        const roomId = fastify.createRoom
          ? fastify.createRoom()
          : `room-${Date.now()}-${i}`;

        tournament.matches.push({
          roomId,
          player1: player1.name,
          player2: player2.name,
          winner: null,
          scoreP1: 0,
          scoreP2: 0,
          status: "playing",
        });

        console.log(
          `üéÆ Nouveau match R${tournament.round}: ${player1.name} vs ${player2.name} (${roomId})`
        );
      }

      // Diffuser la mise √† jour
      if (fastify.broadcastTournamentUpdate) {
        fastify.broadcastTournamentUpdate();
      }

      return reply.send({
        success: true,
        started: true,
        round: tournament.round,
        matchesCount: tournament.matches.length,
        qualifiedCount: tournament.qualified.length,
      });
    } catch (error) {
      console.error("Erreur lors du passage au round suivant:", error);
      return reply
        .code(500)
        .send({ error: "Erreur serveur lors du passage au round suivant" });
    }
  });

  // üîß ROUTE NEW CORRIG√âE - RESET COMPLET AVEC NOUVEAUX TABLEAUX
  fastify.post("/api/tournament/new", async (req, reply) => {
    try {
      console.log("üÜï R√©initialisation compl√®te du tournoi");

      // Fermer les WebSockets connect√©es
      if (fastify.connectedClients) {
        for (const [id, ws] of fastify.connectedClients.entries()) {
          try {
            ws.close(4000, "R√©initialisation du tournoi");
          } catch (e) {
            console.error(`‚ùå Erreur fermeture WS ${id}:`, e);
          }
        }
        fastify.connectedClients.clear();
      }

      // R√©initialiser les rooms / matchs
      if (fastify.rooms) fastify.rooms.clear();
      if (fastify.playerMap) fastify.playerMap.clear();
      if (fastify.matchStates) fastify.matchStates.clear();

      // üîß FIX CRITIQUE: Cr√©er un tournoi compl√®tement frais avec de nouveaux tableaux
      const freshTournament = createFreshTournament();
      fastify.tournaments.set("default", freshTournament);

      console.log("‚úÖ Nouveau tournoi cr√©√©:", {
        players: freshTournament.players.length,
        state: freshTournament.state,
        matches: freshTournament.matches.length,
        isNewPlayersArray: Array.isArray(freshTournament.players),
      });

      // Diffuser la mise √† jour
      if (fastify.broadcastTournamentUpdate) {
        fastify.broadcastTournamentUpdate();
        console.log("üì° Mise √† jour diffus√©e apr√®s reset");
      }

      return reply.send({
        success: true,
        message: "Tournoi r√©initialis√© avec succ√®s",
        tournament: {
          players: freshTournament.players,
          state: freshTournament.state,
          round: freshTournament.round,
        },
      });
    } catch (error) {
      console.error("‚ùå Erreur reset tournoi:", error);
      return reply.code(500).send({
        error: "Erreur serveur lors de la r√©initialisation du tournoi",
      });
    }
  });

  // Route pour obtenir l'√©tat du tournoi
  fastify.get("/api/tournament/status", async (req, reply) => {
    try {
      const tournament = fastify.tournaments.get("default");

      if (!tournament) {
        return reply.send({
          exists: false,
          message: "Aucun tournoi actif",
        });
      }

      return reply.send({
        exists: true,
        state: tournament.state,
        round: tournament.round,
        playersCount: tournament.players.length,
        matchesCount: tournament.matches.length,
        qualifiedCount: tournament.qualified ? tournament.qualified.length : 0,
        winner: tournament.winner,
        players: tournament.players.map((p) => ({ id: p.id, name: p.name })),
        matches: tournament.matches.map((m) => ({
          roomId: m.roomId,
          player1: m.player1,
          player2: m.player2,
          winner: m.winner,
          scoreP1: m.scoreP1,
          scoreP2: m.scoreP2,
          status: m.status,
        })),
      });
    } catch (error) {
      console.error("Erreur lors de la r√©cup√©ration du statut:", error);
      return reply.code(500).send({ error: "Erreur serveur" });
    }
  });

  // Route pour forcer la mise √† jour du statut (debug)
  fastify.post("/api/tournament/refresh", async (req, reply) => {
    try {
      if (fastify.broadcastTournamentUpdate) {
        fastify.broadcastTournamentUpdate();
        return reply.send({ success: true, message: "Mise √† jour diffus√©e" });
      } else {
        return reply
          .code(500)
          .send({ error: "Service de diffusion non disponible" });
      }
    } catch (error) {
      console.error("Erreur lors de la mise √† jour:", error);
      return reply
        .code(500)
        .send({ error: "Erreur serveur lors de la mise √† jour" });
    }
  });

  console.log("üèÜ Routes de tournoi initialis√©es avec succ√®s");
}
